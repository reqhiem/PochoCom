#!/usr/bin/env node

/**
 * Dependencias del Module.
 */

let app = require('../app');
let debug = require('debug')('pochoscom:server');
let http = require('http');

/**
 * GET puerto de entorno y guardarlo en Express
 */

let port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Crea un servidor HTTP.
 */

let server = http.createServer(app);

/**
 * Escucha el puerto porvisto en todas las interfaces de red
 */
/*Connect to DB*/
let {sequelize} = require('../models')
server.listen(port, ()=>{
  sequelize.sync({force:false}).then(()=>{
    console.log('Conectado to DB')
  }).catch(err => {
    console.log(err);
  })
});


server.on('error', onError);
server.on('listening', onListening);

/**
 * Normaliza el puerto en un numero,cadena o falso
 */

function normalizePort(val) {
  let port = parseInt(val, 10);

  if (isNaN(port)) {
    //conducto nombrado
    return val;
  }

  if (port >= 0) {
    // numero de puerto
    return port;
  }

  return false;
}

/**
 * Detector de eventos para el evento  "error" del servidor HTTP
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  let bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // Maneja los errores de escucha especificos con mensajes amigables
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Detector de eventos para el evento "listening" del servidor HTTP
 */

function onListening() {
  let addr = server.address();
  let bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
